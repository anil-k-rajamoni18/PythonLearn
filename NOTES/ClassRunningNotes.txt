Python  Training
---------------------------------

INSTRUCTION 
--------------------
- Please join from laptop 
- Every Day pull the code from remote repo 
- Please do the assignments on time.
- 6:00 or 6:30AM IST (M-F)


DAY-1
==================
- Introduction to Programming Languages [ set of grammer or vocab]
- Hands on CLI(command line interface) tools
- Installation of Python Interpreter, PyCharm, Jupyter [Anaconda]
- Difference between Python2 vs Python3
- print() method  : output method in python 


- OS ARCH 
	USERS 
	APPLICATION 
	KERNAL
	OS [set of s/w]
	H/W[CPU, Memory]

TWO WAYS TO interacct with OS 
===================================	
GUI : Graphical User Interface  : interacting with UI 
CLI : Command Line Interface : interacting with commands 
	1.windows: powershell, gitbash, command prompt
			commands:
				dir : list content of the path or directory 
				cd : change the path 
				mkdir: create a new floder or directory
				rmdir: remove the director or floder 
				cls: clear the screen 
				notepad filename.extension : create a file 
				type filename : display file content
	2.mac-os: terminal
		ls : list the files 
			ls -al 
			ls -l 
			ls -rtc
		cd : change the path 
		clear : clear the screen 
		mkdir : create new dir
		rm : remove dir
		touch , vi : create new file
		cat : display the content of a file 
		cp : copy 
		mv src des : moves the files 
		
	3.linux: terminal 
	
	
### TYPES OF PROGRAMMING LANGS
	1. 1920's [Electrical Computer : processor, cap, diodes ]
		- Binary Lang: 0(ground state), 1 (existed state)
		1010101010101 1010101010
		
	2. 1940's : Assembly Lang : Symbols : Menmonics [40-50]
	
		ADD RX1, RX2
		COPY RX2, RX2
	
	3. 1970: Middle Level : COBOL, FORTAN, C [ mother of all langs]
		- writing instruction in english like language 
						
			#include<stdio.io>
			int main() {
				printf("hello world am c");
			}
		
	4. 1980: High Level Lang : C++, Java , Python , Javascript
		- writing instruction in english like lang
		

example:
	print("Hello World") ---Compiler/Interpreter ---> intermediate (.obj, .class, bytecode) ----> machine code--> CPU [ i will understand only 0s,1s]
	
		

QUESTIONS
- difference between interpreter[java,python,js] vs compiler [c, cpp,java]
- what is bytecode & importance.
- what is ASCII and UNICODE ?

#################################################
DAY-2
##################################################

- Installation of all tools 
- Workspace setup 
- Difference between Python2 vs Python3
- print() method  : output method in python 


INSTALLATION
==========================
	- PYTHON INTERPRETER
		- website: https://www.python.org/ 
		- install latest version : 3.12.0
		- installation PATH [windows]: C:\Users\<username>\AppData\Local\Programs\Python
		- mac-os: /usr/bin/python 
		- verify : open command prompt or terminal type following commands 
			1. python --version
			2. python -V 
			
	- PYCHARM : IDE [Intergrated Development Env]
			- code syntax 
			- debugging / running
			- in-build terminal 
			- project structure 
			- creates virtual env automatically 
			
		- website: https://www.jetbrains.com/edu-products/download/#section=pycharm-edu 
		- install community version 
	
	- JUPYTERNOTEBOOK (MINICODA / ANACONDA)
		1.it's also tool to run your python code. 
			- Go to https://docs.conda.io/en/latest/miniconda.html and download the exe.
			- run the .exe file.
			- Once it is completed : just search , Anaconda prompt is present or not.
		2. install the jupyter notebook
			- open Anaconda Prompt 
			- type : pip install jupyter notebook
		3. Open JupyterNotebook 
			- Open the Anaconda Prompt 
			- cd path 
			- type : jupyter notebook (--- Jupyter Server in background  | you will get a Jupyter UI in browser.)
			
	- GIT BASH
		- first create github account: https://github.com/signup?source=login
		- install gitbash: https://git-scm.com/download/win [choose 64bit]
		- Once it is done, you can verify with 
			- open CMD : type --> git --version
			
	
WORKSPACE SETUP:
=================================
	1. Create main floder with some name ---> PythonTraining.
			- create two sub-floders
				->  myPython
				->  orgPython
	2. Go to PythonTraining/orgPython
		- Open GitBash by right click on empty screen
		- Do the git clone 
			- git clone  https://github.com/anil-k-rajamoni18/PythonLearn
		- after cloning , copy PythonLearn floder from orgPython ---> myPython 
		
	3. TO PULL (get the new changes)
		- Go to this path : PythonTraining/orgPython/PythonLearn and open Git Bash
		- type : git status (it should be nothing to comit)
		- type: git pull ( it will fetch all changes into the local system)
		- after git pull is completed copy the PythonLearn from orgPython -- myPython
			
		
		
### DAY3 ##
- Python Intro
- - running python code using terminal, IDEL, IDE, jupyter notebook.
- Difference between Python2 vs Python3
- chr(num) -- letter , ord(char) --> number 
- print() method  : output method in python 
- variable & comments 


num = 10
num2 = 10.5
name = "venkat@12"  --> 118 101 110 107 97 116 64 49 50 --> 1010 10010 1001 1010

QUESTION:
- how to know the python interpreter location using python code?
- difference between static[c,c++,javascript] lang vs dynamic lang[python, js] ?


 


		
### DAY4 ##
- print() method  : in details
- variable & comments 
- data types


JAVA  : 
syntax:
	datatype variablename = value;
============
String name = "kumar";
String lang = "python";
double rating = 3.5
		
		
PYTHON : 
	syntax: 
	variablename =  value;
============
name = 'kumar'
lang = 'python'
rating = 3.5 


### DAY5 ##
- print() method attributes with examples 
- input() method 
- type casting 



## DAY 6 ###
- type casting with example 
- primitive data types overview
- collectional data types 


## DAY 7###
- prebuild methods:
	- type() : display data type of a variable 
	- id() : display memory address
	- help() : shows documentation
	- dir() : displays all methods & attributes of a data type 
	- len(): displays no. of elements
	- chr() 
	- ord() 
	- bin() oct() hex() 
	
- List Overview 
- Methods 
	- insertion
		 append(obj) 
		 insert(index,obj)
		 extend([obj1,obj2..])
	- deletion
		pop(index=-1)
		remove(value)
	- popular 
		reverse()
		copy()
		clear()
		sort(reverse=False)
		count()
		index()

# shallow copy vs deep copy vs reference copy 


## DAY 8 ## 
- Tuple 
	methods:
		- count() 
		- index()
- Set 
	methods:
		- 

## DAY 9 ## 
- Dictionary 


	
	
 
 
